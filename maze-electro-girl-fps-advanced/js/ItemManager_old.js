/**
 * ItemManager: 고급 아이템 관리 시스템
 * 
 * 핵심 기능:
 * - 코인 및 전기 큐브 생성 및 관리
 * - 동적 아이템 스폰 시스템
 * - 아이템 애니메이션 및 이펙트
 * - 수집 시 시각적/청각적 피드백
 * - 아이템별 특수 효과
 */
class ItemManager {
    constructor(scene, gameManager) {
        this.scene = scene;
        this.gameManager = gameManager;
        
        // 아이템 배열
        this.coins = [];
        this.powerCubes = [];
        this.specialItems = [];\n        \n        // 아이템 설정\n        this.itemTypes = {\n            COIN: {\n                value: 10,\n                model: null,\n                color: 0xFFD700,\n                size: 0.2,\n                rotationSpeed: 2,\n                bobSpeed: 3,\n                bobHeight: 0.1,\n                collectSound: 'coin_collect',\n                effectColor: 0xFFD700\n            },\n            POWER_CUBE: {\n                value: 20,\n                model: null,\n                color: 0x00FFFF,\n                size: 0.3,\n                rotationSpeed: 1,\n                bobSpeed: 2,\n                bobHeight: 0.15,\n                collectSound: 'power_collect',\n                effectColor: 0x00FFFF\n            },\n            HEALTH_PACK: {\n                value: 25,\n                model: null,\n                color: 0xFF6B6B,\n                size: 0.25,\n                rotationSpeed: 1.5,\n                bobSpeed: 2.5,\n                bobHeight: 0.12,\n                collectSound: 'health_collect',\n                effectColor: 0xFF6B6B\n            },\n            SPEED_BOOST: {\n                value: 0,\n                model: null,\n                color: 0x00FF00,\n                size: 0.22,\n                rotationSpeed: 3,\n                bobSpeed: 4,\n                bobHeight: 0.08,\n                collectSound: 'speed_boost',\n                effectColor: 0x00FF00,\n                duration: 10 // 10초간 지속\n            },\n            SHIELD: {\n                value: 0,\n                model: null,\n                color: 0x4169E1,\n                size: 0.28,\n                rotationSpeed: 0.8,\n                bobSpeed: 1.8,\n                bobHeight: 0.18,\n                collectSound: 'shield_collect',\n                effectColor: 0x4169E1,\n                duration: 15 // 15초간 지속\n            }\n        };\n        \n        // 스폰 설정\n        this.spawnSettings = {\n            coinDensity: 0.8, // 미로 당 코인 밀도\n            powerCubeDensity: 0.3,\n            specialItemChance: 0.1, // 특수 아이템 생성 확률\n            respawnTime: 30, // 30초 후 재생성\n            maxItems: {\n                coins: 50,\n                powerCubes: 15,\n                specialItems: 8\n            }\n        };\n        \n        // 동적 스폰 시스템\n        this.dynamicSpawn = {\n            enabled: true,\n            coinSpawnTimer: 0,\n            cubeSpawnTimer: 0,\n            specialSpawnTimer: 0,\n            coinSpawnInterval: 10, // 10초마다 코인 스폰\n            cubeSpawnInterval: 25, // 25초마다 큐브 스폰\n            specialSpawnInterval: 60 // 60초마다 특수 아이템\n        };\n        \n        // 이펙트 파티클 시스템\n        this.particleSystem = {\n            particles: [],\n            maxParticles: 100\n        };\n        \n        this.init();\n    }\n    \n    init() {\n        this.createItemModels();\n        this.setupInitialItems();\n    }\n    \n    /**\n     * 아이템 모델 생성\n     */\n    createItemModels() {\n        // 코인 모델\n        const coinGeometry = new THREE.CylinderGeometry(0.2, 0.2, 0.05, 12);\n        const coinMaterial = new THREE.MeshPhongMaterial({ \n            color: this.itemTypes.COIN.color,\n            emissive: this.itemTypes.COIN.color * 0.2,\n            shininess: 100\n        });\n        this.itemTypes.COIN.geometry = coinGeometry;\n        this.itemTypes.COIN.material = coinMaterial;\n        \n        // 전기 큐브 모델\n        const cubeGeometry = new THREE.BoxGeometry(0.3, 0.3, 0.3);\n        const cubeMaterial = new THREE.MeshPhongMaterial({ \n            color: this.itemTypes.POWER_CUBE.color,\n            emissive: this.itemTypes.POWER_CUBE.color * 0.3,\n            transparent: true,\n            opacity: 0.9\n        });\n        this.itemTypes.POWER_CUBE.geometry = cubeGeometry;\n        this.itemTypes.POWER_CUBE.material = cubeMaterial;\n        \n        // 체력팩 모델\n        const healthGeometry = new THREE.SphereGeometry(0.15, 8, 6);\n        const healthMaterial = new THREE.MeshPhongMaterial({ \n            color: this.itemTypes.HEALTH_PACK.color,\n            emissive: this.itemTypes.HEALTH_PACK.color * 0.2\n        });\n        this.itemTypes.HEALTH_PACK.geometry = healthGeometry;\n        this.itemTypes.HEALTH_PACK.material = healthMaterial;\n        \n        // 스피드 부스트 모델\n        const speedGeometry = new THREE.ConeGeometry(0.15, 0.3, 6);\n        const speedMaterial = new THREE.MeshPhongMaterial({ \n            color: this.itemTypes.SPEED_BOOST.color,\n            emissive: this.itemTypes.SPEED_BOOST.color * 0.3\n        });\n        this.itemTypes.SPEED_BOOST.geometry = speedGeometry;\n        this.itemTypes.SPEED_BOOST.material = speedMaterial;\n        \n        // 실드 모델\n        const shieldGeometry = new THREE.OctahedronGeometry(0.2, 0);\n        const shieldMaterial = new THREE.MeshPhongMaterial({ \n            color: this.itemTypes.SHIELD.color,\n            emissive: this.itemTypes.SHIELD.color * 0.2,\n            transparent: true,\n            opacity: 0.8\n        });\n        this.itemTypes.SHIELD.geometry = shieldGeometry;\n        this.itemTypes.SHIELD.material = shieldMaterial;\n    }\n    \n    /**\n     * 초기 아이템 배치\n     */\n    setupInitialItems() {\n        // 미로 레이아웃에 따라 아이템 배치 (예시 위치)\n        const itemPositions = {\n            coins: [\n                new THREE.Vector3(2, 0.5, 2),\n                new THREE.Vector3(5, 0.5, 3),\n                new THREE.Vector3(8, 0.5, 6),\n                new THREE.Vector3(11, 0.5, 4),\n                new THREE.Vector3(6, 0.5, 9),\n                new THREE.Vector3(3, 0.5, 12),\n                new THREE.Vector3(13, 0.5, 8),\n                new THREE.Vector3(9, 0.5, 13),\n                new THREE.Vector3(4, 0.5, 7),\n                new THREE.Vector3(12, 0.5, 11)\n            ],\n            powerCubes: [\n                new THREE.Vector3(13, 0.5, 3),\n                new THREE.Vector3(3, 0.5, 10),\n                new THREE.Vector3(10, 0.5, 13),\n                new THREE.Vector3(7, 0.5, 5)\n            ],\n            specialItems: [\n                { position: new THREE.Vector3(1, 0.5, 1), type: 'HEALTH_PACK' },\n                { position: new THREE.Vector3(13, 0.5, 13), type: 'SHIELD' }\n            ]\n        };\n        \n        // 코인 생성\n        itemPositions.coins.forEach(pos => {\n            this.createItem('COIN', pos);\n        });\n        \n        // 전기 큐브 생성\n        itemPositions.powerCubes.forEach(pos => {\n            this.createItem('POWER_CUBE', pos);\n        });\n        \n        // 특수 아이템 생성\n        itemPositions.specialItems.forEach(item => {\n            this.createItem(item.type, item.position);\n        });\n    }\n    \n    /**\n     * 아이템 생성\n     */\n    createItem(type, position) {\n        const itemType = this.itemTypes[type];\n        if (!itemType) return null;\n        \n        const item = new THREE.Mesh(itemType.geometry, itemType.material.clone());\n        item.position.copy(position);\n        item.castShadow = true;\n        \n        // 아이템 데이터\n        item.userData = {\n            type: type,\n            value: itemType.value,\n            collected: false,\n            animationTimer: Math.random() * Math.PI * 2, // 랜덤 시작 위치\n            originalY: position.y,\n            glowIntensity: 0\n        };\n        \n        // 글로우 이펙트 추가\n        const glowGeometry = itemType.geometry.clone();\n        const glowMaterial = new THREE.MeshBasicMaterial({\n            color: itemType.effectColor,\n            transparent: true,\n            opacity: 0.3\n        });\n        const glow = new THREE.Mesh(glowGeometry, glowMaterial);\n        glow.scale.setScalar(1.2);\n        item.add(glow);\n        item.userData.glow = glow;\n        \n        // 포인트 라이트 추가\n        const light = new THREE.PointLight(itemType.effectColor, 0.5, 3);\n        light.position.set(0, 0, 0);\n        item.add(light);\n        item.userData.light = light;\n        \n        this.scene.add(item);\n        \n        // 타입별 배열에 추가\n        switch (type) {\n            case 'COIN':\n                this.coins.push(item);\n                break;\n            case 'POWER_CUBE':\n                this.powerCubes.push(item);\n                break;\n            default:\n                this.specialItems.push(item);\n                break;\n        }\n        \n        return item;\n    }\n    \n    /**\n     * 메인 업데이트\n     */\n    update(deltaTime) {\n        this.updateItemAnimations(deltaTime);\n        this.updateDynamicSpawning(deltaTime);\n        this.checkItemCollection();\n        this.updateParticles(deltaTime);\n    }\n    \n    /**\n     * 아이템 애니메이션 업데이트\n     */\n    updateItemAnimations(deltaTime) {\n        const allItems = [...this.coins, ...this.powerCubes, ...this.specialItems];\n        \n        allItems.forEach(item => {\n            if (item.userData.collected) return;\n            \n            const type = item.userData.type;\n            const itemType = this.itemTypes[type];\n            \n            // 애니메이션 타이머 업데이트\n            item.userData.animationTimer += deltaTime;\n            \n            // 회전 애니메이션\n            item.rotation.y += itemType.rotationSpeed * deltaTime;\n            \n            // 상하 부유 애니메이션\n            const bobOffset = Math.sin(item.userData.animationTimer * itemType.bobSpeed) * itemType.bobHeight;\n            item.position.y = item.userData.originalY + bobOffset;\n            \n            // 글로우 효과 애니메이션\n            if (item.userData.glow) {\n                const glowPulse = Math.sin(item.userData.animationTimer * 4) * 0.2 + 0.8;\n                item.userData.glow.material.opacity = glowPulse * 0.3;\n                item.userData.glow.scale.setScalar(1.2 + glowPulse * 0.1);\n            }\n            \n            // 라이트 강도 변화\n            if (item.userData.light) {\n                const lightPulse = Math.sin(item.userData.animationTimer * 3) * 0.3 + 0.7;\n                item.userData.light.intensity = lightPulse * 0.5;\n            }\n        });\n    }\n    \n    /**\n     * 동적 스폰 시스템\n     */\n    updateDynamicSpawning(deltaTime) {\n        if (!this.dynamicSpawn.enabled) return;\n        \n        // 코인 스폰\n        this.dynamicSpawn.coinSpawnTimer += deltaTime;\n        if (this.dynamicSpawn.coinSpawnTimer >= this.dynamicSpawn.coinSpawnInterval) {\n            this.dynamicSpawn.coinSpawnTimer = 0;\n            if (this.coins.length < this.spawnSettings.maxItems.coins) {\n                this.spawnRandomItem('COIN');\n            }\n        }\n        \n        // 큐브 스폰\n        this.dynamicSpawn.cubeSpawnTimer += deltaTime;\n        if (this.dynamicSpawn.cubeSpawnTimer >= this.dynamicSpawn.cubeSpawnInterval) {\n            this.dynamicSpawn.cubeSpawnTimer = 0;\n            if (this.powerCubes.length < this.spawnSettings.maxItems.powerCubes) {\n                this.spawnRandomItem('POWER_CUBE');\n            }\n        }\n        \n        // 특수 아이템 스폰\n        this.dynamicSpawn.specialSpawnTimer += deltaTime;\n        if (this.dynamicSpawn.specialSpawnTimer >= this.dynamicSpawn.specialSpawnInterval) {\n            this.dynamicSpawn.specialSpawnTimer = 0;\n            if (this.specialItems.length < this.spawnSettings.maxItems.specialItems) {\n                const specialTypes = ['HEALTH_PACK', 'SPEED_BOOST', 'SHIELD'];\n                const randomType = specialTypes[Math.floor(Math.random() * specialTypes.length)];\n                this.spawnRandomItem(randomType);\n            }\n        }\n    }\n    \n    /**\n     * 랜덤 위치에 아이템 스폰\n     */\n    spawnRandomItem(type) {\n        const attempts = 10;\n        \n        for (let i = 0; i < attempts; i++) {\n            const x = 1 + Math.random() * 13;\n            const z = 1 + Math.random() * 13;\n            const position = new THREE.Vector3(x, 0.5, z);\n            \n            // 플레이어 근처가 아니고, 벽이 아닌 위치 찾기\n            if (this.isValidSpawnPosition(position)) {\n                this.createItem(type, position);\n                break;\n            }\n        }\n    }\n    \n    /**\n     * 유효한 스폰 위치 체크\n     */\n    isValidSpawnPosition(position) {\n        // 플레이어와 너무 가깝지 않은지 체크\n        if (this.gameManager.playerController) {\n            const playerPos = this.gameManager.playerController.position;\n            if (position.distanceTo(playerPos) < 3) {\n                return false;\n            }\n        }\n        \n        // 벽 위치가 아닌지 체크 (간단한 구현)\n        if (this.gameManager.maze && this.gameManager.maze.isWall) {\n            return !this.gameManager.maze.isWall(Math.round(position.x), Math.round(position.z));\n        }\n        \n        return true;\n    }\n    \n    /**\n     * 아이템 수집 체크\n     */\n    checkItemCollection() {\n        if (!this.gameManager.playerController) return;\n        \n        const playerPos = this.gameManager.playerController.position;\n        const collectRange = 0.8;\n        \n        const allItems = [...this.coins, ...this.powerCubes, ...this.specialItems];\n        \n        allItems.forEach(item => {\n            if (item.userData.collected) return;\n            \n            const distance = playerPos.distanceTo(item.position);\n            if (distance < collectRange) {\n                this.collectItem(item);\n            }\n        });\n    }\n    \n    /**\n     * 아이템 수집 처리\n     */\n    collectItem(item) {\n        if (item.userData.collected) return;\n        \n        item.userData.collected = true;\n        const type = item.userData.type;\n        const value = item.userData.value;\n        \n        // 타입별 처리\n        switch (type) {\n            case 'COIN':\n                this.handleCoinCollection(value);\n                break;\n            case 'POWER_CUBE':\n                this.handlePowerCubeCollection(value);\n                break;\n            case 'HEALTH_PACK':\n                this.handleHealthPackCollection(value);\n                break;\n            case 'SPEED_BOOST':\n                this.handleSpeedBoostCollection();\n                break;\n            case 'SHIELD':\n                this.handleShieldCollection();\n                break;\n        }\n        \n        // 수집 이펙트\n        this.createCollectionEffect(item);\n        \n        // 사운드 재생\n        this.playSound(this.itemTypes[type].collectSound);\n        \n        // UI 알림\n        if (this.gameManager.uiManager) {\n            this.gameManager.uiManager.showPickupNotification(type, value);\n        }\n        \n        // 아이템 제거\n        this.removeItem(item);\n    }\n    \n    /**\n     * 코인 수집 처리\n     */\n    handleCoinCollection(value) {\n        if (this.gameManager.uiManager) {\n            this.gameManager.uiManager.addCoins(1);\n            this.gameManager.uiManager.addScore(value);\n        }\n        console.log(`🪙 코인 획득! +${value}점`);\n    }\n    \n    /**\n     * 전기 큐브 수집 처리\n     */\n    handlePowerCubeCollection(value) {\n        // 전기 총 업그레이드\n        if (this.gameManager.electroGun) {\n            const upgraded = this.gameManager.electroGun.upgrade(value);\n            if (upgraded) {\n                console.log('⚡ 전기 총 레벨 업!');\n            }\n        }\n        \n        // 점수도 추가\n        if (this.gameManager.uiManager) {\n            this.gameManager.uiManager.addScore(value);\n        }\n        \n        console.log(`⚡ 전기 큐브 획득! 전력 +${value}`);\n    }\n    \n    /**\n     * 체력팩 수집 처리\n     */\n    handleHealthPackCollection(value) {\n        if (this.gameManager.playerController) {\n            this.gameManager.playerController.heal(value);\n        }\n        console.log(`❤️ 체력 회복! +${value}HP`);\n    }\n    \n    /**\n     * 스피드 부스트 수집 처리\n     */\n    handleSpeedBoostCollection() {\n        if (this.gameManager.playerController) {\n            // 일시적으로 이동 속도 증가\n            const originalSpeed = this.gameManager.playerController.moveSpeed;\n            this.gameManager.playerController.moveSpeed *= 1.5;\n            \n            setTimeout(() => {\n                if (this.gameManager.playerController) {\n                    this.gameManager.playerController.moveSpeed = originalSpeed;\n                }\n            }, this.itemTypes.SPEED_BOOST.duration * 1000);\n        }\n        console.log('🏃 스피드 부스트 활성화!');\n    }\n    \n    /**\n     * 실드 수집 처리\n     */\n    handleShieldCollection() {\n        if (this.gameManager.playerController) {\n            // 일시적 무적 상태\n            this.gameManager.playerController.invulnerable = true;\n            this.gameManager.playerController.invulnerabilityTime = this.itemTypes.SHIELD.duration * 1000;\n            \n            // 시각적 효과 (플레이어 주변에 실드 이펙트)\n            this.createShieldEffect();\n        }\n        console.log('🛡️ 실드 활성화!');\n    }\n    \n    /**\n     * 수집 이펙트 생성\n     */\n    createCollectionEffect(item) {\n        const position = item.position.clone();\n        const color = this.itemTypes[item.userData.type].effectColor;\n        \n        // 파티클 생성\n        for (let i = 0; i < 15; i++) {\n            this.createParticle(\n                position, \n                color, \n                new THREE.Vector3(\n                    (Math.random() - 0.5) * 5,\n                    Math.random() * 3 + 2,\n                    (Math.random() - 0.5) * 5\n                ),\n                1.0 // 생명\n            );\n        }\n        \n        // 링 확산 이펙트\n        this.createRingEffect(position, color);\n    }\n    \n    /**\n     * 파티클 생성\n     */\n    createParticle(position, color, velocity, life) {\n        const particleGeometry = new THREE.SphereGeometry(0.02, 4, 4);\n        const particleMaterial = new THREE.MeshBasicMaterial({ \n            color: color,\n            transparent: true,\n            opacity: 1\n        });\n        \n        const particle = new THREE.Mesh(particleGeometry, particleMaterial);\n        particle.position.copy(position);\n        \n        particle.userData = {\n            velocity: velocity,\n            life: life,\n            maxLife: life,\n            gravity: -5\n        };\n        \n        this.particleSystem.particles.push(particle);\n        this.scene.add(particle);\n    }\n    \n    /**\n     * 링 확산 이펙트\n     */\n    createRingEffect(position, color) {\n        const ringGeometry = new THREE.RingGeometry(0.1, 0.2, 16);\n        const ringMaterial = new THREE.MeshBasicMaterial({ \n            color: color,\n            transparent: true,\n            opacity: 0.8,\n            side: THREE.DoubleSide\n        });\n        \n        const ring = new THREE.Mesh(ringGeometry, ringMaterial);\n        ring.position.copy(position);\n        ring.rotation.x = -Math.PI / 2;\n        \n        this.scene.add(ring);\n        \n        // 애니메이션\n        const startTime = performance.now();\n        const duration = 500; // 0.5초\n        \n        const animateRing = () => {\n            const elapsed = performance.now() - startTime;\n            const progress = elapsed / duration;\n            \n            if (progress < 1) {\n                ring.scale.setScalar(1 + progress * 3);\n                ring.material.opacity = 0.8 * (1 - progress);\n                requestAnimationFrame(animateRing);\n            } else {\n                this.scene.remove(ring);\n            }\n        };\n        \n        animateRing();\n    }\n    \n    /**\n     * 실드 이펙트 생성\n     */\n    createShieldEffect() {\n        if (!this.gameManager.playerController) return;\n        \n        const shieldGeometry = new THREE.SphereGeometry(1.2, 16, 12);\n        const shieldMaterial = new THREE.MeshBasicMaterial({\n            color: 0x4169E1,\n            transparent: true,\n            opacity: 0.3,\n            wireframe: true\n        });\n        \n        const shield = new THREE.Mesh(shieldGeometry, shieldMaterial);\n        this.gameManager.playerController.camera.add(shield);\n        \n        // 15초 후 제거\n        setTimeout(() => {\n            if (shield.parent) {\n                shield.parent.remove(shield);\n            }\n        }, this.itemTypes.SHIELD.duration * 1000);\n    }\n    \n    /**\n     * 파티클 업데이트\n     */\n    updateParticles(deltaTime) {\n        for (let i = this.particleSystem.particles.length - 1; i >= 0; i--) {\n            const particle = this.particleSystem.particles[i];\n            const data = particle.userData;\n            \n            // 물리 업데이트\n            data.velocity.y += data.gravity * deltaTime;\n            particle.position.add(data.velocity.clone().multiplyScalar(deltaTime));\n            \n            // 생명 감소\n            data.life -= deltaTime;\n            const lifeRatio = data.life / data.maxLife;\n            \n            // 투명도 감소\n            particle.material.opacity = lifeRatio;\n            \n            // 생명 끝나면 제거\n            if (data.life <= 0) {\n                this.scene.remove(particle);\n                this.particleSystem.particles.splice(i, 1);\n            }\n        }\n    }\n    \n    /**\n     * 아이템 제거\n     */\n    removeItem(item) {\n        const type = item.userData.type;\n        \n        // 배열에서 제거\n        switch (type) {\n            case 'COIN':\n                const coinIndex = this.coins.indexOf(item);\n                if (coinIndex > -1) this.coins.splice(coinIndex, 1);\n                break;\n            case 'POWER_CUBE':\n                const cubeIndex = this.powerCubes.indexOf(item);\n                if (cubeIndex > -1) this.powerCubes.splice(cubeIndex, 1);\n                break;\n            default:\n                const specialIndex = this.specialItems.indexOf(item);\n                if (specialIndex > -1) this.specialItems.splice(specialIndex, 1);\n                break;\n        }\n        \n        // 씬에서 제거\n        this.scene.remove(item);\n    }\n    \n    /**\n     * 사운드 재생\n     */\n    playSound(soundName) {\n        console.log(`🔊 ${soundName} 사운드 재생`);\n        \n        // 실제 구현에서는 웹 오디오 API 사용\n        // const audio = new Audio(`sounds/${soundName}.mp3`);\n        // audio.play();\n    }\n    \n    /**\n     * 모든 아이템 제거 (게임 리셋)\n     */\n    clearAllItems() {\n        [...this.coins, ...this.powerCubes, ...this.specialItems].forEach(item => {\n            this.scene.remove(item);\n        });\n        \n        this.coins = [];\n        this.powerCubes = [];\n        this.specialItems = [];\n        \n        // 파티클도 모두 제거\n        this.particleSystem.particles.forEach(particle => {\n            this.scene.remove(particle);\n        });\n        this.particleSystem.particles = [];\n    }\n    \n    /**\n     * 게임 리셋\n     */\n    reset() {\n        this.clearAllItems();\n        this.setupInitialItems();\n        \n        // 스폰 타이머 리셋\n        this.dynamicSpawn.coinSpawnTimer = 0;\n        this.dynamicSpawn.cubeSpawnTimer = 0;\n        this.dynamicSpawn.specialSpawnTimer = 0;\n    }\n    \n    /**\n     * 현재 상태 반환\n     */\n    getState() {\n        return {\n            coinCount: this.coins.length,\n            powerCubeCount: this.powerCubes.length,\n            specialItemCount: this.specialItems.length,\n            totalItems: this.coins.length + this.powerCubes.length + this.specialItems.length,\n            particleCount: this.particleSystem.particles.length\n        };\n    }\n}