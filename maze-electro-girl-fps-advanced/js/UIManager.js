/**
 * UIManager: 고급 UI 관리 시스템
 * 
 * 핵심 기능:
 * - 실시간 HUD 업데이트
 * - 게임 상태 화면 관리
 * - 애니메이션 및 시각적 피드백
 * - 알림 및 효과 시스템
 * - 반응형 UI 디자인
 */
class UIManager {
    constructor(gameManager) {
        this.gameManager = gameManager;
        
        // UI 요소들
        this.elements = {\n            // HUD 요소들\n            coinCount: document.getElementById('coinCount'),\n            score: document.getElementById('score'),\n            healthFill: document.getElementById('healthFill'),\n            healthText: document.getElementById('healthText'),\n            powerFill: document.getElementById('powerFill'),\n            powerLevel: document.getElementById('powerLevel'),\n            ammoCount: document.getElementById('ammoCount'),\n            \n            // 화면 요소들\n            mainMenu: document.getElementById('mainMenu'),\n            gameOverScreen: document.getElementById('gameOverScreen'),\n            victoryScreen: document.getElementById('victoryScreen'),\n            \n            // 알림 및 효과\n            damageIndicator: document.getElementById('damageIndicator'),\n            pickupNotification: document.getElementById('pickupNotification'),\n            \n            // 최종 결과\n            finalCoins: document.getElementById('finalCoins'),\n            finalScore: document.getElementById('finalScore'),\n            enemiesKilled: document.getElementById('enemiesKilled'),\n            victoryCoins: document.getElementById('victoryCoins'),\n            victoryScore: document.getElementById('victoryScore'),\n            completionTime: document.getElementById('completionTime')\n        };\n        \n        // 애니메이션 상태\n        this.animations = {\n            damageIndicator: {\n                active: false,\n                duration: 500,\n                startTime: 0\n            },\n            pickupNotification: {\n                active: false,\n                duration: 2000,\n                queue: []\n            },\n            scoreCounter: {\n                current: 0,\n                target: 0,\n                speed: 50 // 초당 증가량\n            },\n            coinCounter: {\n                current: 0,\n                target: 0,\n                speed: 5\n            }\n        };\n        \n        // 게임 통계\n        this.gameStats = {\n            startTime: 0,\n            endTime: 0,\n            coinsCollected: 0,\n            enemiesKilled: 0,\n            totalScore: 0\n        };\n        \n        // 알림 메시지 템플릿\n        this.notificationMessages = {\n            COIN: '🪙 코인 획득!',\n            POWER_CUBE: '⚡ 전기 큐브!',\n            HEALTH_PACK: '❤️ 체력 회복!',\n            SPEED_BOOST: '🏃 스피드 부스트!',\n            SHIELD: '🛡️ 실드 활성화!',\n            LEVEL_UP: '🔥 전기 총 레벨 업!',\n            ENEMY_KILL: '💀 적 제거!'\n        };\n        \n        // 크로스헤어 상태\n        this.crosshair = {\n            element: document.querySelector('.crosshair'),\n            hitMarkerActive: false\n        };\n        \n        this.init();\n    }\n    \n    init() {\n        this.setupEventListeners();\n        this.initializeUI();\n    }\n    \n    /**\n     * 이벤트 리스너 설정\n     */\n    setupEventListeners() {\n        // 메인 메뉴 버튼들\n        document.getElementById('startBtn')?.addEventListener('click', () => {\n            this.startGame();\n        });\n        \n        document.getElementById('tutorialBtn')?.addEventListener('click', () => {\n            this.showTutorial();\n        });\n        \n        // 게임 오버 화면 버튼들\n        document.getElementById('restartBtn')?.addEventListener('click', () => {\n            this.restartGame();\n        });\n        \n        document.getElementById('mainMenuBtn')?.addEventListener('click', () => {\n            this.showMainMenu();\n        });\n        \n        // 승리 화면 버튼들\n        document.getElementById('playAgainBtn')?.addEventListener('click', () => {\n            this.restartGame();\n        });\n        \n        document.getElementById('victoryMenuBtn')?.addEventListener('click', () => {\n            this.showMainMenu();\n        });\n        \n        // ESC 키로 메뉴 토글\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                this.toggleMenu();\n            }\n        });\n    }\n    \n    /**\n     * UI 초기화\n     */\n    initializeUI() {\n        this.updateScore(0);\n        this.updateCoins(0);\n        this.updateHealth(100, 100);\n        this.updateWeaponLevel(1, 5);\n        this.showMainMenu();\n    }\n    \n    /**\n     * 메인 업데이트 (게임 루프에서 호출)\n     */\n    update(deltaTime) {\n        this.updateAnimations(deltaTime);\n        this.updateCounters(deltaTime);\n        this.updateEffects(deltaTime);\n    }\n    \n    /**\n     * 애니메이션 업데이트\n     */\n    updateAnimations(deltaTime) {\n        // 데미지 인디케이터\n        if (this.animations.damageIndicator.active) {\n            const elapsed = performance.now() - this.animations.damageIndicator.startTime;\n            const progress = elapsed / this.animations.damageIndicator.duration;\n            \n            if (progress >= 1) {\n                this.animations.damageIndicator.active = false;\n                this.elements.damageIndicator.classList.remove('active');\n            }\n        }\n        \n        // 픽업 알림\n        if (this.animations.pickupNotification.active) {\n            const elapsed = performance.now() - this.animations.pickupNotification.startTime;\n            const progress = elapsed / this.animations.pickupNotification.duration;\n            \n            if (progress >= 1) {\n                this.hidePickupNotification();\n                this.processNotificationQueue();\n            }\n        }\n    }\n    \n    /**\n     * 카운터 애니메이션 업데이트\n     */\n    updateCounters(deltaTime) {\n        // 점수 카운터\n        if (this.animations.scoreCounter.current !== this.animations.scoreCounter.target) {\n            const diff = this.animations.scoreCounter.target - this.animations.scoreCounter.current;\n            const increment = Math.sign(diff) * Math.min(Math.abs(diff), this.animations.scoreCounter.speed * deltaTime);\n            this.animations.scoreCounter.current += increment;\n            \n            if (this.elements.score) {\n                this.elements.score.textContent = Math.floor(this.animations.scoreCounter.current);\n            }\n        }\n        \n        // 코인 카운터\n        if (this.animations.coinCounter.current !== this.animations.coinCounter.target) {\n            const diff = this.animations.coinCounter.target - this.animations.coinCounter.current;\n            const increment = Math.sign(diff) * Math.min(Math.abs(diff), this.animations.coinCounter.speed * deltaTime);\n            this.animations.coinCounter.current += increment;\n            \n            if (this.elements.coinCount) {\n                this.elements.coinCount.textContent = Math.floor(this.animations.coinCounter.current);\n            }\n        }\n    }\n    \n    /**\n     * 효과 업데이트\n     */\n    updateEffects(deltaTime) {\n        // 크로스헤어 히트 마커\n        if (this.crosshair.hitMarkerActive) {\n            // 히트 마커는 짧은 시간 후 자동으로 사라짐\n            setTimeout(() => {\n                this.crosshair.hitMarkerActive = false;\n                this.crosshair.element?.classList.remove('hit');\n            }, 100);\n        }\n    }\n    \n    /**\n     * 점수 업데이트\n     */\n    updateScore(score) {\n        this.animations.scoreCounter.target = score;\n        this.gameStats.totalScore = score;\n    }\n    \n    /**\n     * 코인 수 업데이트\n     */\n    updateCoins(coins) {\n        this.animations.coinCounter.target = coins;\n        this.gameStats.coinsCollected = coins;\n    }\n    \n    /**\n     * 체력 업데이트\n     */\n    updateHealth(current, max) {\n        if (!this.elements.healthFill || !this.elements.healthText) return;\n        \n        const percentage = (current / max) * 100;\n        this.elements.healthFill.style.width = `${percentage}%`;\n        this.elements.healthText.textContent = Math.ceil(current);\n        \n        // 체력에 따른 색상 변화\n        if (percentage > 70) {\n            this.elements.healthFill.style.background = 'linear-gradient(90deg, #00FF00, #66FF66)';\n        } else if (percentage > 30) {\n            this.elements.healthFill.style.background = 'linear-gradient(90deg, #FFFF00, #FFFF66)';\n        } else {\n            this.elements.healthFill.style.background = 'linear-gradient(90deg, #FF0000, #FF6B6B)';\n        }\n        \n        // 체력이 낮을 때 깜빡임 효과\n        if (percentage < 20) {\n            this.elements.healthFill.style.animation = 'healthCritical 1s infinite';\n        } else {\n            this.elements.healthFill.style.animation = 'none';\n        }\n    }\n    \n    /**\n     * 무기 레벨 업데이트\n     */\n    updateWeaponLevel(level, maxLevel) {\n        if (!this.elements.powerFill || !this.elements.powerLevel) return;\n        \n        const percentage = (level / maxLevel) * 100;\n        this.elements.powerFill.style.width = `${percentage}%`;\n        this.elements.powerLevel.textContent = level;\n        \n        // 레벨에 따른 색상 변화\n        const colors = [\n            'linear-gradient(90deg, #8A2BE2, #DDA0DD)', // 레벨 1\n            'linear-gradient(90deg, #00FFFF, #66FFFF)', // 레벨 2\n            'linear-gradient(90deg, #FFD700, #FFFF66)', // 레벨 3\n            'linear-gradient(90deg, #FF6B6B, #FF9999)', // 레벨 4\n            'linear-gradient(90deg, #00FF00, #66FF66)'  // 레벨 5\n        ];\n        \n        this.elements.powerFill.style.background = colors[level - 1] || colors[0];\n    }\n    \n    /**\n     * 오버히트 상태 업데이트\n     */\n    updateOverheat(heat, maxHeat, overheated) {\n        // 오버히트 UI 구현 (필요시 추가)\n        if (overheated) {\n            // 화면에 오버히트 경고 표시\n            console.log('🔥 무기 과열!');\n        }\n    }\n    \n    /**\n     * 데미지 인디케이터 표시\n     */\n    showDamageIndicator() {\n        if (!this.elements.damageIndicator) return;\n        \n        this.animations.damageIndicator.active = true;\n        this.animations.damageIndicator.startTime = performance.now();\n        this.elements.damageIndicator.classList.add('active');\n        \n        // 크로스헤어도 빨갛게\n        this.crosshair.element?.classList.add('damage');\n        setTimeout(() => {\n            this.crosshair.element?.classList.remove('damage');\n        }, 300);\n    }\n    \n    /**\n     * 픽업 알림 표시\n     */\n    showPickupNotification(type, value) {\n        const message = this.notificationMessages[type] || '아이템 획득!';\n        const displayText = value ? `${message} +${value}` : message;\n        \n        // 큐에 추가\n        this.animations.pickupNotification.queue.push({\n            text: displayText,\n            type: type\n        });\n        \n        // 현재 표시 중이 아니면 즉시 표시\n        if (!this.animations.pickupNotification.active) {\n            this.processNotificationQueue();\n        }\n    }\n    \n    /**\n     * 알림 큐 처리\n     */\n    processNotificationQueue() {\n        if (this.animations.pickupNotification.queue.length === 0) {\n            return;\n        }\n        \n        const notification = this.animations.pickupNotification.queue.shift();\n        this.displayPickupNotification(notification);\n    }\n    \n    /**\n     * 픽업 알림 실제 표시\n     */\n    displayPickupNotification(notification) {\n        if (!this.elements.pickupNotification) return;\n        \n        this.elements.pickupNotification.textContent = notification.text;\n        this.elements.pickupNotification.className = `pickup-notification show ${notification.type.toLowerCase()}`;\n        \n        this.animations.pickupNotification.active = true;\n        this.animations.pickupNotification.startTime = performance.now();\n    }\n    \n    /**\n     * 픽업 알림 숨기기\n     */\n    hidePickupNotification() {\n        if (!this.elements.pickupNotification) return;\n        \n        this.elements.pickupNotification.classList.remove('show');\n        this.animations.pickupNotification.active = false;\n    }\n    \n    /**\n     * 히트 마커 표시\n     */\n    showHitMarker() {\n        if (!this.crosshair.element) return;\n        \n        this.crosshair.element.classList.add('hit');\n        this.crosshair.hitMarkerActive = true;\n    }\n    \n    /**\n     * 게임 시작\n     */\n    startGame() {\n        this.hideAllScreens();\n        this.gameStats.startTime = performance.now();\n        \n        if (this.gameManager) {\n            this.gameManager.startGame();\n        }\n    }\n    \n    /**\n     * 게임 재시작\n     */\n    restartGame() {\n        this.hideAllScreens();\n        this.resetStats();\n        this.initializeUI();\n        \n        if (this.gameManager) {\n            this.gameManager.restartGame();\n        }\n    }\n    \n    /**\n     * 메인 메뉴 표시\n     */\n    showMainMenu() {\n        this.hideAllScreens();\n        if (this.elements.mainMenu) {\n            this.elements.mainMenu.style.display = 'flex';\n        }\n        \n        // 포인터 락 해제\n        if (document.pointerLockElement) {\n            document.exitPointerLock();\n        }\n    }\n    \n    /**\n     * 게임 오버 화면 표시\n     */\n    showGameOver() {\n        this.hideAllScreens();\n        this.gameStats.endTime = performance.now();\n        \n        // 최종 통계 업데이트\n        if (this.elements.finalCoins) {\n            this.elements.finalCoins.textContent = this.gameStats.coinsCollected;\n        }\n        if (this.elements.finalScore) {\n            this.elements.finalScore.textContent = this.gameStats.totalScore;\n        }\n        if (this.elements.enemiesKilled) {\n            this.elements.enemiesKilled.textContent = this.gameStats.enemiesKilled;\n        }\n        \n        if (this.elements.gameOverScreen) {\n            this.elements.gameOverScreen.style.display = 'flex';\n        }\n        \n        // 포인터 락 해제\n        if (document.pointerLockElement) {\n            document.exitPointerLock();\n        }\n    }\n    \n    /**\n     * 승리 화면 표시\n     */\n    showVictory() {\n        this.hideAllScreens();\n        this.gameStats.endTime = performance.now();\n        \n        const completionTime = (this.gameStats.endTime - this.gameStats.startTime) / 1000;\n        const minutes = Math.floor(completionTime / 60);\n        const seconds = Math.floor(completionTime % 60);\n        \n        // 승리 통계 업데이트\n        if (this.elements.victoryCoins) {\n            this.elements.victoryCoins.textContent = this.gameStats.coinsCollected;\n        }\n        if (this.elements.victoryScore) {\n            this.elements.victoryScore.textContent = this.gameStats.totalScore;\n        }\n        if (this.elements.completionTime) {\n            this.elements.completionTime.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n        }\n        \n        if (this.elements.victoryScreen) {\n            this.elements.victoryScreen.style.display = 'flex';\n        }\n        \n        // 포인터 락 해제\n        if (document.pointerLockElement) {\n            document.exitPointerLock();\n        }\n    }\n    \n    /**\n     * 튜토리얼 표시\n     */\n    showTutorial() {\n        alert(`🎮 게임 튜토리얼\n\n⚡ 미로의 전기 총 소녀가 되어 모험을 떠나보세요!\n\n🎯 목표:\n• 🪙 코인을 수집하여 점수를 얻으세요\n• ⚡ 전기 큐브로 총을 업그레이드하세요\n• 👹 악당들을 물리치세요\n\n🎮 조작법:\n• WASD / 방향키: 이동\n• 마우스: 시점 회전\n• 스페이스: 점프\n• 클릭: 전기 총 발사\n• ESC: 메뉴\n\n💡 팁:\n• 점프로 높은 곳의 아이템을 획득하세요\n• 전기 큐브로 총을 강화하면 새로운 능력이 해금됩니다\n• 적들마다 다른 행동 패턴을 가지고 있어요`);\n    }\n    \n    /**\n     * 메뉴 토글\n     */\n    toggleMenu() {\n        if (this.gameManager && this.gameManager.isPlaying()) {\n            this.showMainMenu();\n            this.gameManager.pauseGame();\n        }\n    }\n    \n    /**\n     * 모든 화면 숨기기\n     */\n    hideAllScreens() {\n        const screens = [\n            this.elements.mainMenu,\n            this.elements.gameOverScreen,\n            this.elements.victoryScreen\n        ];\n        \n        screens.forEach(screen => {\n            if (screen) {\n                screen.style.display = 'none';\n            }\n        });\n    }\n    \n    /**\n     * 통계 리셋\n     */\n    resetStats() {\n        this.gameStats = {\n            startTime: 0,\n            endTime: 0,\n            coinsCollected: 0,\n            enemiesKilled: 0,\n            totalScore: 0\n        };\n        \n        this.animations.scoreCounter.current = 0;\n        this.animations.scoreCounter.target = 0;\n        this.animations.coinCounter.current = 0;\n        this.animations.coinCounter.target = 0;\n    }\n    \n    /**\n     * 적 처치 기록\n     */\n    recordEnemyKill() {\n        this.gameStats.enemiesKilled++;\n        this.showPickupNotification('ENEMY_KILL', null);\n    }\n    \n    /**\n     * 레벨업 알림\n     */\n    showLevelUpNotification() {\n        this.showPickupNotification('LEVEL_UP', null);\n    }\n    \n    /**\n     * UI 가시성 설정\n     */\n    setUIVisibility(visible) {\n        const hud = document.querySelector('.hud');\n        const crosshair = document.querySelector('.crosshair');\n        \n        if (hud) hud.style.display = visible ? 'flex' : 'none';\n        if (crosshair) crosshair.style.display = visible ? 'block' : 'none';\n    }\n    \n    /**\n     * 현재 상태 반환\n     */\n    getState() {\n        return {\n            gameStats: { ...this.gameStats },\n            isMenuVisible: this.elements.mainMenu?.style.display !== 'none',\n            currentScore: this.animations.scoreCounter.current,\n            currentCoins: this.animations.coinCounter.current\n        };\n    }\n}\n\n// 추가 CSS 애니메이션을 동적으로 추가\nconst uiStyles = document.createElement('style');\nuiStyles.textContent = `\n    .crosshair.hit {\n        color: #FF0000 !important;\n        transform: translate(-50%, -50%) scale(1.3);\n        transition: all 0.1s ease;\n    }\n    \n    .crosshair.damage {\n        color: #FF6666 !important;\n        filter: drop-shadow(0 0 5px #FF0000);\n    }\n    \n    .pickup-notification.coin {\n        border-color: #FFD700;\n        color: #FFD700;\n    }\n    \n    .pickup-notification.power_cube {\n        border-color: #00FFFF;\n        color: #00FFFF;\n    }\n    \n    .pickup-notification.health_pack {\n        border-color: #FF6B6B;\n        color: #FF6B6B;\n    }\n    \n    @keyframes healthCritical {\n        0%, 100% { opacity: 1; }\n        50% { opacity: 0.5; }\n    }\n    \n    .hud {\n        transition: all 0.3s ease;\n    }\n    \n    .hud.hidden {\n        opacity: 0;\n        transform: translateY(-20px);\n    }\n`;\ndocument.head.appendChild(uiStyles);